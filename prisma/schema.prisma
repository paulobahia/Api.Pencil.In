generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Studio {
  id                   String                @id @default(uuid())
  name                 String
  address              String?
  phone                String?
  description          String?
  employees            Employee[]
  calendarIntegrations CalendarIntegration[]
  services             Service[]             @relation("StudioServices")
  clients              Client[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  isDeleted            Boolean               @default(false)
  deletedAt            DateTime?
}

model Employee {
  id              String            @id @default(uuid())
  userId          String
  studioId        String?
  user            User              @relation(fields: [userId], references: [id])
  studio          Studio?           @relation(fields: [studioId], references: [id], onDelete: SetNull)
  OperatingHour   OperatingHour[]
  EmployeeService EmployeeService[]
  Absence         Absence[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isDeleted       Boolean           @default(false)
  deletedAt       DateTime?
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  phone     String     @unique
  password  String
  Employee  Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isDeleted Boolean    @default(false)
  deletedAt DateTime?
}

model OperatingHour {
  id            String                   @id @default(uuid())
  employee      Employee                 @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId    String
  dayOfWeek     DayOfWeek
  specificDate  DateTime?
  isAbsence     Boolean                  @default(false)
  timeIntervals TimeInterval[]
  isDefault     Boolean                  @default(false)
  exceptions    OperatingHourException[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  isDeleted     Boolean                  @default(false)
  deletedAt     DateTime?
}

model OperatingHourException {
  id              String         @id @default(uuid())
  operatingHour   OperatingHour  @relation(fields: [operatingHourId], references: [id], onDelete: Cascade)
  operatingHourId String
  exceptionDate   DateTime
  timeIntervals   TimeInterval[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model TimeInterval {
  id                       String                  @id @default(uuid())
  operatingHour            OperatingHour           @relation(fields: [operatingHourId], references: [id], onDelete: Cascade)
  operatingHourId          String
  OperatingHourException   OperatingHourException? @relation(fields: [operatingHourExceptionId], references: [id])
  operatingHourExceptionId String?
  startTime                DateTime
  endTime                  DateTime
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  isDeleted                Boolean                 @default(false)
  deletedAt                DateTime?
}

model Service {
  id                String              @id @default(uuid())
  studio            Studio              @relation("StudioServices", fields: [studioId], references: [id], onDelete: Cascade)
  studioId          String
  name              String
  description       String?
  durationMinutes   Int
  price             Float
  employeeServices  EmployeeService[]
  SchedulingService SchedulingService[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?
}

model EmployeeService {
  id         String    @id @default(uuid())
  employeeId String
  serviceId  String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  service    Service   @relation(fields: [serviceId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
}

model Client {
  id          String       @id @default(uuid())
  name        String
  phone       String       @unique
  studio      Studio       @relation(fields: [studioId], references: [id], onDelete: Cascade)
  studioId    String
  schedulings Scheduling[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  deletedAt   DateTime?
}

model Scheduling {
  id                String              @id @default(uuid())
  client            Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId          String
  schedulingTime    DateTime
  status            SchedulingStatus
  SchedulingService SchedulingService[]
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?
}

model SchedulingService {
  id           String     @id @default(uuid())
  scheduling   Scheduling @relation(fields: [schedulingId], references: [id])
  schedulingId String
  service      Service    @relation(fields: [serviceId], references: [id])
  serviceId    String
}

model CalendarIntegration {
  id           String       @id @default(uuid())
  studio       Studio       @relation(fields: [studioId], references: [id], onDelete: Cascade)
  studioId     String
  calendarType CalendarType
  eventId      String
  status       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  isDeleted    Boolean      @default(false)
  deletedAt    DateTime?
}

model Absence {
  id         String    @id @default(uuid())
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  date       DateTime
  reason     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum CalendarType {
  GOOGLE_CALENDAR
  OUTLOOK_CALENDAR
  APPLE_CALENDAR
  NOTION_CALENDAR
}

enum SchedulingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
